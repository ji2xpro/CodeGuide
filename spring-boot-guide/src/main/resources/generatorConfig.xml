<?xml version="1.0" encoding="UTF-8"?>
<!-- 配置文件头 -->
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!-- 配置生成器；完整的配置属性见：http://www.mybatis.org/generator/configreference/xmlconfig.html -->
<!--
    <generatorConfiguration>标签，没有任何属性，直接写根节点即可。
    其包含以下子元素（有严格的配置顺序）：
        1、<properties> (0个或1个)
        2、<classPathEntry> (0个或多个)
        3、<context> (1个或多个)
-->
<generatorConfiguration>
    <!--
        <properties>标签，用于指定一个需要在配置中解析使用的外部属性文件，不是必须的元素。可以是0个或1个。
        引入属性文件后，可以在配置中使用${property}的形式引用属性文件中的属性值。
        该标签有2个可选属性：
            1、resource：指定**classpath**下的属性文件，使用类似com/myproject/generatorConfig.properties这样的属性值。
            2、url：可以指定文件系统上的特定位置，例如file:///C:/myfolder/generatorConfig.properties。

        注意：resource和url属性只能使用其中一个来指定，同时出现会报错。

        另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用
        <properties resource="" url="" />。
    -->
    <properties resource="generator.properties"/>

    <!--
        <classPathEntry>标签，指定特定的路径，可以是0或多个，不受限制，最常见的用法是通过这个属性指定数据库驱动的路径。
        该标签只有1个属性：
		    1、location：在MBG工作的时候,需要额外加载的依赖包，location属性指明加载jar/zip包的全路径。

        注意：classPathEntry只在下面这两种情况下才有效：
            1、当加载JDBC驱动内省数据库时。
            2、当加载根类中的 JavaModelGenerator 检查重写的方法时。

        因此，如果你需要加载其他用途的jar包，classPathEntry起不到作用，不能这么写，解决的办法就是将你用的jar包添加到类路径中，在Eclipse等IDE中运行的时候，添加jar包比较容易。当从命令行执行的时候，需要用java -cp xx.jar,xx2.jar xxxMainClass这种方式在-cp后面指定来使用(注意-jar会导致-cp无效)。
    -->
    <classPathEntry location="${jdbc.driverLocation}"/>

    <!--
        <context>标签，用于指定生成一组对象的环境，一个数据库对应一个context，至少需要有一个<context>元素。
        例如指定要连接的数据库，要生成对象的类型和要处理的数据库中的表。运行MBG的时候还可以指定要运行的<context>。
        该标签有4个属性：
            1、id：用来唯一确定一个<context>元素，该id属性可以在运行MBG的使用，唯一的（必选）。
            2、defaultModelType：指定生成实体类的样式（可选）。
                1）conditional：*这是默认值*，这个模型和下面的hierarchical类似，除了如果那个单独的类将只包含一个字段，将不会生成一个单独的类。 因此，如果一个表的主键只有一个字段，那么不会为该字段生成单独的实体类，会将该字段合并到基本实体类中。
                2）flat：该模型为每一张表只生成一个实体类。这个实体类包含表中的所有字段。**这种模型最简单，推荐使用。**
                3）hierarchical：如果表有主键，那么该模型会产生一个单独的主键实体类，如果表还有BLOB字段，则会为表生成一个包含所有BLOB字段的单独的实体类，然后为所有其他的字段生成一个单独的实体类。 MBG会在所有生成的实体类之间维护一个继承关系。
            3、targetRuntime：此属性用于指定生成的代码的运行时环境（可选），该属性支持以下可选值：
                1）MyBatis3：默认值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample。
                2）MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample。
                3）Ibatis2Java2。
                4）Ibatis2Java5。
                一般情况下使用默认值即可，有关这些值的具体作用以及区别请查看中文文档的详细内容。
            4、introspectedColumnImpl：该参数可以指定扩展org.mybatis.generator.api.IntrospectedColumn该类的实现类（可选）。
        其包含以下子元素（有严格的配置顺序）：
            1、<property> (0个或多个)
            2、<plugin> (0个或多个)
            3、<commentGenerator> (0个或1个)
            4、<jdbcConnection> (1个)
            5、<javaTypeResolver> (0个或1个)
            6、<javaModelGenerator> (1个)
            7、<sqlMapGenerator> (0个或1个)
            8、<javaClientGenerator> (0个或1个)
            9、<table> (1个或多个)
    -->
    <context id="Mysql" defaultModelType="flat" targetRuntime="MyBatis3">
        <!--
            <property>标签，用于配置数据库分隔符，可以是0个到多个。如mysql的表名为'user_info'。
		    该标签有6个<property>子标签属性：
			    1、autoDelimitKeywords：自动给关键字添加分隔符，mybatis维护了一个关键字列表，在org.mybatis.generator.internal.db.SqlReservedWords类。
        	    2、beginningDelimiter：分隔符开始。
        	    3、endingDelimiter：分隔符结束。
        	    4、javaFileEncoding：设置java文件编码，如GBK或UTF-8。
        	    5、javaFormatter：不常用。
        	    6、xmlFormatter：不常用。
        -->
        <!-- autoDelimitKeywords：自动识别数据库关键字，默认false。当表名或者字段名为SQL关键字的时候，可以设置该属性为true，MBG会自动给表名或字段名添加**分隔符**。一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖 -->
        <property name="autoDelimitKeywords" value="false"/>

        <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号 -->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>

        <!-- javaFileEncoding：设置要使用的Java文件的编码，默认使用当前平台的编码，只有当生产的编码需要特殊指定时才需要使用，一般用不到 -->
        <property name="javaFileEncoding" value="UTF-8"/>

        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>

        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

        <!-- 是否使用通用Mapper提供的注释工具，默认true使用，这样在生成代码时会包含字段的注释（目前只有mysql和oracle支持），设置false后会用默认的，或者你可以配置自己的注释插件 -->
        <property name="useMapperCommentGenerator" value="true"/>

        <!--
            <plugin>标签，用来定义一个插件，用于扩展或修改通过MBG生成的代码，插件按配置顺序执行。可以是0个或多个。
		    该标签只有1个属性：
			    1、type：插件的全限定名称。
        -->
        <!-- 配置缓存插件 -->
        <!--<plugin type="org.mybatis.generator.plugins.CachePlugin">-->
            <!--<property name="cache_eviction" value="LRU"/>-->
            <!--<property name="cache_size" value="1024"/>-->
        <!--</plugin>-->

        <!-- 配置内置的或者自定义的Plugin -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin" />

        <!-- 生成的实体类重写toString方法 -->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>

        <!--生成mapper.xml时覆盖原文件-->
        <plugin type="org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin" />

        <plugin type="tk.mybatis.mapper.generator.MapperPlugin">
            <property name="mappers" value="tk.mybatis.mapper.common.Mapper"/>

            <!--是否强制生成注解，默认false，如果设置为true，不管数据库名和字段名是否一致，都会生成注解（包含@Table和@Column） -->
            <property name="forceAnnotation" value="true"/>

            <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号 -->
            <!--<property name="beginningDelimiter" value="`"/>-->
            <!--<property name="endingDelimiter" value="`"/>-->

            <!-- 是否区分大小写，默认值false。如果数据库区分大小写，这里就需要配置为true，这样当表名为USER时，会生成@Table(name = "USER")注解，否则使用小写user时会找不到表 -->
            <property name="caseSensitive" value="true"/>

            <!--在生成的 model中，增加字段名的常量，便于使用Example拼接查询条件的时候使用-->
            <!--<property name="generateColumnConsts" value="true"/>-->

            <property name="lombok" value="Data"/>
        </plugin>

        <!--
            <commentGenerator>标签，旨在创建class时，对表和字段的备注信息进行控制，可以是0个或1个。
            该标签只有1个属性：
                1、type：可以指定用户自定义的注释实现类（可选），该类需要实现org.mybatis.generator.api.CommentGenerator接口，而且必有一个默认的构造方法。这个属性接收默认的特殊值DEFAULT，会使用默认的实现类org.mybatis.generator.internal.DefaultCommentGenerator。
        -->
        <commentGenerator type="com.github.abel533.mybatis.generator.MyCommentGenerator">
            <!--
                使用<property>标签进行配置，true：阻止；false：不阻止。
                该标签有3个可选的<property>子标签属性：
                    1、suppressAllComments：阻止生成注释，默认为false。
                    2、suppressDate：阻止生成的注释包含时间戳，默认为false。
                    3、addRemarkComments：注释是否包含数据库表的备注信息，默认为false。
            -->
            <!-- 是否阻止生成注释 -->
            <property name="suppressAllComments" value="true"/>

            <!-- 是否阻止生成的注释包含时间戳 -->
            <property name="suppressDate" value="true" />

            <!-- 是否在注释中添加数据库字段备注注释 -->
            <property name="addRemarkComments" value="true"/>
        </commentGenerator>

        <!--
            <jdbcConnection>标签，用于指定MBG要连接的数据库信息，必须配置，只能配置一个。
            配置该标签只需要注意如果JDBC驱动不在**classpath**下，就需要通过<classPathEntry>元素引入jar包，这里**推荐**将jar包放到**classpath**下。
            该标签有4个属性：
                1、driverClass：访问数据库的JDBC驱动程序的完全限定类名（必选）。
                2、connectionURL：访问数据库的JDBC连接URL（必选）。
                3、userId：访问数据库的用户ID（可选）。
                4、password：访问数据库的密码（可选）。

            此外该元素还可以接受多个<property>子元素，这里配置的<property>属性都会添加到JDBC驱动的属性中。
        -->
        <jdbcConnection
                driverClass="${jdbc.driverClass}"
                connectionURL="${jdbc.connectionURL}"
                userId="${jdbc.userName}"
                password="${jdbc.password}">

            <!-- MySQL不支持schema或者catalog，所以需要添加这个。参考:http://www.mybatis.org/generator/usage/mysql.html -->
            <property name="nullCatalogMeansCurrent" value="true"/>

            <!-- MySQL8默认启用SSL，不关闭会有警告 -->
            <property name="useSSL" value="false"/>
        </jdbcConnection>

        <!--
            <javaTypeResolver>标签，用于指定JDBC类型与Java类型转换关系，可以是0个或1个。
            配置该标签用来指定JDBC类型和Java类型如何转换，当处理JDBC类型到Java类型，默认使用JavaTypeResolverDefaultImpl，注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和NUMERIC数据类型。
            该标签只有1个属性：
                1、type：和<commentGenerator>比较类型，提供了默认的实现DEFAULT，一般情况下使用默认即可，需要特殊处理的情况可以通过其他元素配置来解决，不建议修改该属性（可选）。
        -->
        <javaTypeResolver>
            <!--
                该标签还有1个可选的<property>子标签属性：
                    1、forceBigDecimals：该属性可以控制是否强制DECIMAL和NUMERIC类型的字段转换为Java类型的java.math.BigDecimal，默认值为false，一般不需要配置。
                        1）false情况：默认情况下的转换规则：
                            如果精度>0或者长度>18，就会使用java.math.BigDecimal
                            如果精度=0并且10<=长度<=18，就会使用java.lang.Long
                            如果精度=0并且5<=长度<=9，就会使用java.lang.Integer
                            如果精度=0并且长度<5，就会使用java.lang.Short
                        2）true情况：使用java.math.BigDecimal对应DECIMAL和NUMERIC数据类型
            -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!--========================================java模型生成器=====================================================-->
        <!--
            <javaModelGenerator>标签，用来控制生成的实体类，该元素必须配置一个，并且最多一个。
            根据<context>中配置的defaultModelType，一个表可能会对应生成多个不同的实体类。一个表对应多个类实际上并不方便，所以前面也推荐使用flat，这种情况下一个表对应一个实体类。
            该标签有2个必选属性:
                1、targetPackage：指定生成的model实体类存放的包名，一般就是放在该包下。实际还会受到其他配置的影响(<table>中会提到)，真实的包受enableSubPackages属性控制。
                2、targetProject：指定生成的目标路径中，如果目录不存在，MBG不会自动建目录（注意目录必须存在）。可以是绝对路径或相对路径（如 targetProject="src/main/java"）。
        -->
        <javaModelGenerator targetPackage="${model.targetPackage}" targetProject="src/main/java">
            <!--
                该标签还有5个<property>子标签属性：
			        1、constructorBased：该属性只对Mybatis3有效，如果是true就会使用构造方法入参，false则使用setter方式，默认false。
			        2、enableSubPackages：如果是true，MBG会根据catalog和schema来生成子包。false则使用targetPackage属性。默认false。
			        3、immutable：用来配置实体类属性是否可变。如果为true，则忽略constructorBased属性，都会用构造方法入参，不会生成setter方法。默认false。
                    4、rootClass：设置所有实体类的基类。如果设置，则需要使用类的全限定名称。如果MBG能够加载rootClass，那么不会覆盖和父类完全匹配的属性。匹配规则：属性名完全相同、属性类型相同、属性有getter方法、属性有setter方法。
			        5、trimStrings：判断是否对数据库查询结果进行trim操作，默认值为false。如果为true，则会生成如下代码：public void setUserName(String userName) { this.userName = userName == null ? null : userName.trim(); }
            -->
            <!-- 是否对model添加构造函数，该属性只对MyBatis3有效，如果true就会使用构造方法入参，如果false就会使用setter方式。默认为false -->
            <property name="constructorBased" value="false"/>

            <!-- 是否允许子包：targetPackage.schemaName.tableName
，如果true，MBG会根据catalog和schema来生成子包。如果false就会直接用targetPackage属性。默认为false -->
            <property name="enableSubPackages" value="false"/>

            <!-- 生成的Model对象是否可变，如果设置为true，那么constructorBased不管设置成什么，都会使用构造方法入参，并且不会生成setter方法。如果为false，实体类属性就可以改变。默认为false -->
            <property name="immutable" value="false"/>

            <!-- 设置所有实体类的基类。如果设置，需要使用类的全限定名称。并且如果MBG能够加载rootClass，那么MBG不会覆盖和父类中完全匹配的属性。匹配规则：属性名完全相同；属性类型相同；属性有getter方法；属性有setter方法 -->
            <!--<property name="rootClass" value="${rootClass.path}"/>-->

            <!-- 是否对数据库查询结果进行trim操作，如果设置为true就会生成类似这样public void setUsername(String username) {this.username = username == null ? null : username.trim();}的setter方法。默认值为false -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!--========================================sqlMap的XML文件生成器==============================================-->
        <!--
            <sqlMapGenerator>标签，用于配置SQL映射生成器(Mapper.xml)的属性。该元素可选，最多配置一个。
            但是有如下两种必选的特殊情况：
                1、如果targetRuntime目标是**iBATIS2**，该元素必须配置一个。
                2、如果targetRuntime目标是**MyBatis3**，只有当<javaClientGenerator>需要XML时，该元素必须配置一个。 如果没有配置<javaClientGenerator>，则使用以下的规则：
                    1）如果指定了一个<sqlMapGenerator>，那么MBG将只生成XML的SQL映射文件和实体类。
                    2）如果没有指定<sqlMapGenerator>，那么MBG将只生成实体类。
            该标签有2个必选属性：（和前面提过的<javaModelGenerator>的属性含义一样）
                1、targetPackage：指定生成的model实体类存放的包名，一般就是放在该包下。实际还会受到其他配置的影响(<table>中会提到)，真实的包受enableSubPackages属性控制。
                2、targetProject：指定生成的目标路径中，如果目录不存在，MBG不会自动建目录（注意目录必须存在）。可以是绝对路径或相对路径（如 targetProject="src/main/java"）。
        -->
        <sqlMapGenerator targetPackage="${mapper.targetPackage}" targetProject="src/main/resources">
            <!--
                该标签还有1个可选的<property>子标签属性：
                    1、enableSubPackages：如果是true，MBG会根据catalog和schema来生成子包。false则使用targetPackage属性。默认false。
            -->
            <!-- 是否允许子包：targetPackage.schemaName.tableName，如果true，MBG会根据catalog和schema来生成子包。如果false就会直接用targetPackage属性。默认为false -->
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!--=============================================Mapper接口===================================================-->
        <!--
            <javaClientGenerator>标签，用于配置生成Mapper接口的信息。该标签可选，最多配置一个。如果不配置该元素，就不会生成Mapper接口。
            该标签有3个必选属性：
                1、type:该属性用于选择一个预定义的客户端代码（可以理解为Mapper接口）生成器，用户可以自定义实现，需要继承org.mybatis.generator.codegen.AbstractJavaClientGenerator类，必选有一个默认的构造方法。 该属性提供了以下预定的代码生成器，首先根据<context>的targetRuntime分成三类：
                    1）MyBatis3:
                        ANNOTATEDMAPPER:基于注解的Mapper接口，不会有对应的XML映射文件。
                        MIXEDMAPPER:XML和注解的混合形式，(上面这种情况中的)SqlProvider注解方法会被XML替代。
                        XMLMAPPER:所有的方法都在XML中，接口调用依赖XML文件。
                    2）MyBatis3Simple:
                        ANNOTATEDMAPPER:基于注解的Mapper接口，不会有对应的XML映射文件。
                        XMLMAPPER:所有的方法都在XML中，接口调用依赖XML文件。
                    3）Ibatis2Java2或**Ibatis2Java5**:
                        IBATIS:生成的对象符合iBATIS的DAO框架（不建议使用）。
                        GENERIC-CI:生成的对象将只依赖于SqlMapClient，通过构造方法注入。
                        GENERIC-SI:生成的对象将只依赖于SqlMapClient，通过setter方法注入。
                        SPRING:生成的对象符合Spring的DAO接口。
                2、targetPackage：指定生成的model实体类存放的包名，一般就是放在该包下。实际还会受到其他配置的影响(<table>中会提到)，真实的包受enableSubPackages属性控制。
                3、targetProject：指定生成的目标路径中，如果目录不存在，MBG不会自动建目录（注意目录必须存在）。可以是绝对路径或相对路径（如 targetProject="src/main/java"）。
            该元素还有1个可选属性：
                1、implementationPackage:如果指定了该属性，实现类就会生成在这个包中。
         -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="${client.targetPackage}" targetProject="src/main/java" >
            <!-- 是否允许子包：targetPackage.schemaName.tableName
，如果true，MBG会根据catalog和schema来生成子包。如果false就会直接用targetPackage属性。默认为false -->
            <property name="enableSubPackages" value="false"/>

            <!-- 定义Maper.java源代码中的ByExample()方法的可视性，可选的值有：public；private；protected；default。注意：如果targetRuntime="MyBatis3"，此参数被忽略 -->
            <property name="exampleMethodVisibility" value=""/>

            <!-- 方法名计数器，注意：如果targetRuntime="MyBatis3"，此参数被忽略 -->
            <property name="methodNameCalculator" value=""/>

            <!-- 用于指定一个所有生成的接口都继承的父接口。这个值可以通过<table>配置的rootInterface属性覆盖。这个属性对于通用Mapper来说，可以让生成的所有接口都继承该接口，但是MBG只负责生成，不负责检查 -->
            <property name="rootInterface" value=""/>
        </javaClientGenerator>

        <!--=======================================选择tableName生成文件===============================================-->
        <!--
            <table>标签是最重要的一个标签，该标签用于配置需要生成的数据库表。该元素至少要配置一个，可以配置多个。该元素用来配置要通过内省的表。只有配置的才会生成实体类和其他文件。
            选择的table会生成以下文件：
                1、SQL map文件
                2、生成一个主键类；
                3、除了BLOB和主键的其他字段的类；
                4、包含BLOB的类；
                5、一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；
                6、Mapper接口（可选）

            该标签有1个必选属性：
                1、tableName：指定要生成的表名，可以使用SQL通配符匹配多个表。
                注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会根据设置的schema，catalog或tableName去查询数据表，按照下面的流程：
                    1）如果schema，catalog或tableName中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；
                    2）否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；
                    3）否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；
                    4）否则，使用指定的大小写格式查询；
                另外的，如果在创建表的时候，使用的""把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；这个时候，请设置delimitIdentifiers="true"即可保留大小写格式；

            该标签包含多个可选属性：
                1、schema：数据库的schema，即数据库名；可以使用SQL通配符匹配。如果设置了该值，生成SQL的表名会变成如schema.tableName的形式。
                2、catalog：数据库的catalog。如果设置了该值，生成SQL的表名会变成如catalog.tableName的形式。
                3、alias：数据表设置的别名。如果指定，这个值会用在生成的select查询SQL的表的别名和列名上。列名会被别名为alias_actualColumnName(别名_实际列名)这种模式。
                4、domainObjectName：生成对象的基本名称。如果没有指定，MBG会自动根据表名来生成名称。如果设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面
                5、enableXXX:XXX代表多种SQL方法，该属性用来指定是否生成对应的XXX语句
                    enableInsert（默认true）：指定是否生成insert语句；
                    enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；
                    enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；
                    enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；
                    enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；
                    enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；
                    enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；
                    enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；
                6、selectByPrimaryKeyQueryId:DBA跟踪工具会用到，具体请看详细文档。
                7、selectByExampleQueryId:DBA跟踪工具会用到，具体请看详细文档。
                8、modelType：和<context>的defaultModelType含义一样，这里可以针对表进行配置，这里的配置会覆盖<context>的defaultModelType配置。
                9、escapeWildcards：这个属性表示当查询列，是否对schema和表名中的SQL通配符 ('_' and '%') 进行转义。 对于某些驱动当schema或表名中包含SQL通配符时（例如，一个表名是MY_TABLE，有一些驱动需要将下划线进行转义）是必须的。默认值是false。
                10、delimitIdentifiers：是否给标识符增加**分隔符**。默认false。当catalog,schema或tableName中包含空白时，默认为true。参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）
                11、delimitAllColumns:是否对所有列添加**分隔符**。默认false。

            注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；

         -->
        <!--<table tableName="%"-->
               <!--enableCountByExample="false"-->
               <!--enableUpdateByExample="false"-->
               <!--enableDeleteByExample="false"-->
               <!--enableSelectByExample="false"-->
               <!--selectByExampleQueryId="false">-->
            <!--&lt;!&ndash;-->
                <!--<table>包含以下子元素（有严格的配置顺序）：-->
                    <!--1、<property> (0个或多个)-->
                    <!--2、<generatedKey> (0个或1个)-->
                    <!--3、<columnRenamingRule> (0个或1个)-->
                    <!--4、<columnOverride> (0个或多个)-->
                    <!--5、<ignoreColumn> (0个或多个)-->
            <!--&ndash;&gt;-->

            <!--&lt;!&ndash; 参考<javaModelGenerator>的constructorBased属性，含义一样 &ndash;&gt;-->
            <!--<property name="constructorBased" value="false"/>-->

            <!--&lt;!&ndash; 默认为false，如果设置为true，在生成的SQL中table名字将不会包含schema和catalog前缀 &ndash;&gt;-->
            <!--<property name="ignoreQualifiersAtRuntime" value="false"/>-->

            <!--&lt;!&ndash; 参考<javaModelGenerator>的immutable属性，含义一样 &ndash;&gt;-->
            <!--<property name="immutable" value="false"/>-->

            <!--&lt;!&ndash; 此属性用于配置是否为表只生成实体类。如果设置为true就不会有Mapper接口。如果配置了<sqlMapGenerator>，并且modelOnly为true，那么XML映射文件中只有实体对象的映射元素(<resultMap>)。如果为true还会覆盖属性中的enableXXX方法，将不会生成任何CRUD方法 &ndash;&gt;-->
            <!--<property name="modelOnly" value="false"/>-->

            <!--&lt;!&ndash; 参考<javaModelGenerator>的rootClass属性，含义一样 &ndash;&gt;-->
            <!--<property name="rootClass" value=""/>-->

            <!--&lt;!&ndash; 参考<javaClientGenerator>的rootInterface属性，含义一样 &ndash;&gt;-->
            <!--<property name="rootInterface" value=""/>-->

            <!--&lt;!&ndash; 运行时的catalog，当生成表和运行环境的表的catalog不一样时，在生成的SQL中将使用指定的catalog配置，而不是table上的catalog配置 &ndash;&gt;-->
            <!--<property name="runtimeCatalog" value=""/>-->

            <!--&lt;!&ndash; 运行时的schema，当生成表和运行环境的表的schema不一样时，在生成的SQL中将使用指定的schema配置，而不是table上的schema配置 &ndash;&gt;-->
            <!--<property name="runtimeSchema" value=""/>-->

            <!--&lt;!&ndash; 运行时的tableName，当生成表和运行环境的表的tableName不一样时，在生成的SQL中将使用指定的tableName配置，而不是table上的tableName配置 &ndash;&gt;-->
            <!--<property name="runtimeTableName" value=""/>-->

            <!--&lt;!&ndash; 该属性值会追加到selectAll方法后的SQL中，会直接跟order by拼接后添加到SQL末尾。注意,该属性只针对MyBatis3Simple有用 &ndash;&gt;-->
            <!--<property name="selectAllOrderByClause" value="age desc,username asc"/>-->

            <!--&lt;!&ndash;-->
                <!--如果设置为true，那么MBG会使用从数据库元数据获取的列名作为生成的实体对象的属性。比如BORN_DATE,生成的属性名字就是BORN_DATE,而不会是bornDate-->
                <!--如果为false(默认值)，MGB将会尝试将返回的名称转换为驼峰形式。-->
                <!--在这两种情况下，可以通过元素显示指定，在这种情况下将会忽略这个（useActualColumnNames）属性。-->
            <!--&ndash;&gt;-->
            <!--<property name="useActualColumnNames" value="false"/>-->

            <!--&lt;!&ndash; 如果是true，MBG生成resultMaps的时候会使用列的索引，而不是结果中列名的顺序 &ndash;&gt;-->
            <!--<property name="useColumnIndexes" value="false"/>-->

            <!--&lt;!&ndash; 如果是true，那么MBG生成属性名的时候会将列名和列备注接起来。这对于那些通过第四代语言自动生成列(例如:FLD22237)，但是备注包含有用信息(例如:"customer id")的数据库来说很有用。在这种情况下，MBG会生成属性名FLD2237_CustomerId &ndash;&gt;-->
            <!--<property name="useCompoundPropertyNames" value="false"/>-->

            <!--&lt;!&ndash;-->
                <!--<generatedKey>子标签，用来指定自动生成主键的属性（identity字段或者sequences序列），最多可以配置一个。如果指定这个元素，MBG在生成insert的SQL映射文件中插入一个<selectKey>元素。 这个元素**非常重要**。-->
                <!--该标签有2个必选属性：-->
                    <!--1、column：生成列的列名-->
                    <!--2、sqlStatement：将返回新值的SQL语句。如果这是一个identity列，您可以使用其中一个预定义的的特殊值。预定义值如下：-->
                        <!--1）Cloudscape ：相当于selectKey的SQL为:VALUES IDENTITY_VAL_LOCAL()-->
                        <!--2）DB2        ：相当于selectKey的SQL为:VALUES IDENTITY_VAL_LOCAL()-->
                        <!--3）DB2_MF     ：相当于selectKey的SQL为:SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1-->
                        <!--4）Derby      ：相当于selectKey的SQL为:VALUES IDENTITY_VAL_LOCAL()-->
                        <!--5）HSQLDB     ：相当于selectKey的SQL为:CALL IDENTITY()-->
                        <!--6）Informix   ：相当于selectKey的SQL为:select dbinfo('sqlca.sqlerrd1') from systables where tabid=1-->
                        <!--7）MySql      ：相当于selectKey的SQL为:SELECT LAST_INSERT_ID()-->
                        <!--8）SqlServer  ：相当于selectKey的SQL为:SELECT SCOPE_IDENTITY()-->
                        <!--9）SYBASE     ：相当于selectKey的SQL为:SELECT @@IDENTITY-->
                        <!--10）JDBC      ：相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性，这会配置MBG使用MyBatis3支持的JDBC标准的生成key来生成代码。 这是一个独立于数据库获取标识列中的值的方法。 重要: 只有当目标运行为MyBatis3时才会产生正确的代码。 如果与iBATIS2一起使用目标运行时会产生运行时错误的代码。-->
                <!--该标签还包含两个可选属性：-->
                    <!--1、identity：当设置为true时，该列会被标记为identity列，并且<selectKey>元素会被插入在insert后面。当设置为false时，<selectKey>会插入到insert之前（通常是序列）。**重要**: 即使您type属性指定为post，您仍然需要为identity列将该参数设置为true。这将标志MBG从插入列表中删除该列。默认值是false。-->
                    <!--2、type：type=post and identity=true的时候生成的<selectKey>中的order=AFTER,当type=pre的时候，identity只能为false，生成的<selectKey>中的order=BEFORE。可以这么理解，自动增长的列只有插入到数据库后才能得到ID，所以是AFTER,使用序列时，只有先获取序列之后，才能插入数据库，所以是BEFORE。-->
            <!--&ndash;&gt;-->
            <!--<generatedKey column="" sqlStatement="" identity="" type=""/>-->

            <!--&lt;!&ndash;-->
                <!--<columnRenamingRule>标签，用于在生成列之前，对列进行重命名。最多可以配置一个。-->
                <!--配置该标签对那些存在同一前缀的字段想在生成属性名时去除前缀的表非常有用。例如假设一个表包含以下的列：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等，那么就可以设置searchString为"^CUST_"，并使用空白替换，那么生成的Customer对象中的属性名称就不是custId,custName等，而是先被替换为ID，NAME，EMAIL，然后变成属性:id，name，email。-->

                <!--注意：在内部，MBG是使用java.util.regex.Matcher.replaceAll方法实现这个功能。请参阅有关该方法的文档和在Java中使用正则表达式的例子。-->

                <!--当<columnOverride>匹配一列时，这个元素（<columnRenamingRule>）会被忽略。<columnOverride>优先于重命名的规则。-->
                <!--该标签有1个必选属性：-->
                    <!--1、searchString：定义将被替换的字符串的正则表达式。-->
                <!--该标签有1个可选属性：-->
                    <!--1、replaceString：这是一个用来替换搜索字符串列每一个匹配项的字符串。如果没有指定，就会使用空字符串。-->
            <!--&ndash;&gt;-->
            <!--<columnRenamingRule searchString="" replaceString=""/>-->

            <!--&lt;!&ndash;-->
                <!--<columnOverride>标签，用于将某些属性默认计算的值更改为指定的值。该标签可选，可以配置多个。-->
                <!--该标签有1个必选属性：-->
                    <!--1、column：要重写的列名。-->
                <!--该标签有多个可选属性：-->
                    <!--1、property：要使用的Java属性的名称。如果没有指定，MBG会根据列名生成。例如，如果一个表的一列名为STRT_DTE，MBG会根据<table>的useActualColumnNames属性生成STRT_DTE或strtDte。-->
                    <!--2、javaType：该列属性值为完全限定的Java类型。如果需要，这可以覆盖由JavaTypeResolver计算出的类型。对某些数据库来说，这是必要的用来处理**“奇怪的”**数据库类型（例如MySql的unsigned bigint类型需要映射为java.lang.Object)。-->
                    <!--3、jdbcType：该列的JDBC类型(INTEGER, DECIMAL, NUMERIC, VARCHAR等等)。如果需要，这可以覆盖由JavaTypeResolver计算出的类型。对某些数据库来说，这是必要的用来处理怪异的JDBC驱动 (例如DB2的LONGVARCHAR类型需要为iBATIS映射为VARCHAR)。-->
                    <!--4、typeHandler：用户定义的需要用来处理这列的类型处理器。它必须是一个继承iBATIS的TypeHandler类或TypeHandlerCallback接口（该接口很容易继承）的全限定的类名。如果没有指定或者是空白，iBATIS会用默认的类型处理器来处理类型。**重要**:MBG不会校验这个类型处理器是否存在或者可用。 MGB只是简单的将这个值插入到生成的SQL映射的配置文件中。-->
                    <!--5、delimitedColumnName：指定是否应在生成的SQL的列名称上增加**分隔符**。如果列的名称中包含空格，MGB会自动添加**分隔符**，所以这个重写只有当列名需要强制为一个合适的名字或者列名是数据库中的保留字时是必要的。-->
            <!--&ndash;&gt;-->
            <!--<columnOverride column="username" property="" javaType="" jdbcType="" typeHandler="" delimitedColumnName="" />-->

            <!--&lt;!&ndash;-->
                <!--<ignoreColumn>标签用来屏蔽不需要生成的列。该标签可选，可以配置多个。-->
                <!--该标签有1个必选属性：-->
                    <!--1、column：要忽略的列名。-->
                <!--该标签有1个可选属性：-->
                    <!--2、delimitedColumnName：匹配列名的时候是否区分大小写。如果为true则区分。默认值为false，不区分大小写。-->
            <!--&ndash;&gt;-->
            <!--<ignoreColumn column="deptId" delimitedColumnName=""/>-->
        <!--</table>-->

        <!--========================================参考实例=====================================================-->
        <!--<table tableName="TPS_Project" domainObjectName="Project"-->
               <!--enableCountByExample="false"-->
               <!--enableUpdateByExample="false"-->
               <!--enableDeleteByExample="false"-->
               <!--enableSelectByExample="false"-->
               <!--selectByExampleQueryId="false">-->
            <!--<property name="useActualColumnNames" value="true"/>-->

            <!--<columnOverride column="ProjectId" property="projectId" javaType="int" />-->
            <!--<columnOverride column="TPID" property="tpId" javaType="int" />-->
            <!--<columnOverride column="CityID" property="cityId" javaType="int" />-->
            <!--<columnOverride column="CategoryID" property="categoryId" javaType="int" />-->
            <!--<columnOverride column="NeedRealName" property="needRealName" javaType="boolean" />-->
            <!--<columnOverride column="BDName" property="bdName" />-->
            <!--<columnOverride column="NeedAnswer" property="needAnswer" javaType="byte"/>-->
            <!--<columnOverride column="BDUserId" property="bdUserId" javaType="int"/>-->
            <!--<columnOverride column="TPProjectId" property="tpProjectId"/>-->

            <!--<ignoreColumn column="CreateTime"/>-->
            <!--<ignoreColumn column="UpdateTime"/>-->
        <!--</table>-->

        <table tableName="sys_user" domainObjectName="UserSlave" mapperName="UserSlaveMapper" enableCountByExample="false"
               enableUpdateByExample="false"
               enableDeleteByExample="false"
               enableSelectByExample="false"
               selectByExampleQueryId="false">
            <property name="useActualColumnNames" value="true"/>

            <columnOverride column="id" property="id" javaType="Integer" />
            <columnOverride column="username" property="username" />
            <columnOverride column="password" property="password" />
            <columnOverride column="age" property="age" javaType="Integer"/>
            <columnOverride column="remark" property="remark"/>

            <ignoreColumn column="createTime"/>
            <ignoreColumn column="updateTime"/>
        </table>


        <!--<table tableName="sys_account" domainObjectName="Account" enableCountByExample="false"-->
               <!--enableUpdateByExample="false"-->
               <!--enableDeleteByExample="false"-->
               <!--enableSelectByExample="false"-->
               <!--selectByExampleQueryId="false">-->
            <!--<property name="useActualColumnNames" value="true"/>-->

            <!--<columnOverride column="id" property="id" javaType="Integer" />-->
            <!--<columnOverride column="number" property="number" />-->
            <!--<columnOverride column="name" property="name" />-->
            <!--<columnOverride column="sex" property="sex" />-->
            <!--<columnOverride column="age" property="age" javaType="Integer"/>-->
        <!--</table>-->


        <!--<table schema="test" tableName="user_t" domainObjectName="User"-->
               <!--enableCountByExample="false"-->
               <!--enableUpdateByExample="false"-->
               <!--enableDeleteByExample="false"-->
               <!--enableSelectByExample="false"-->
               <!--selectByExampleQueryId="false">-->
            <!--<generatedKey column="Id" sqlStatement="Mysql"/>-->
        <!--</table>-->
    </context>
</generatorConfiguration>