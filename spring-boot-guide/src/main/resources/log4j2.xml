<?xml version="1.0" encoding="UTF-8"?>
<!-- 共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF.
    All:最低等级的，用于打开所有日志记录.
    Trace:是追踪，就是程序推进以下，你就可以写个trace输出，所以trace应该会特别多，不过没关系，我们可以设置最低日志级别不让他输出.
    Debug:指出细粒度信息事件对调试应用程序是非常有帮助的.
    Info:消息在粗粒度级别上突出强调应用程序的运行过程.
    Warn:输出警告及warn以下级别的日志.
    Error:输出错误信息日志.
    Fatal:输出每个严重的错误事件将会导致应用程序的退出的日志.
    OFF:最高等级的，用于关闭所有日志记录.

    程序会打印高于或等于所设置级别的日志，设置的日志等级越高，打印出来的日志就越少。
-->
<!-- 根节点Configuration有两个属性:status和monitorinterval，有两个子节点:Appenders和Loggers(表明可以定义多个Appender和Logger).
    status用来指定log4j本身的打印日志的级别，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出.
    monitorinterval用于指定log4j自动重新配置的监测间隔时间，单位是s,最小是5s.
-->
<Configuration status="WARN" monitorInterval="30">
    <!--全局变量-->
    <properties>
        <property name="LOG_HOME">output/logs</property>
        <property name="FILE_NAME">info</property>
        <!-- 输出日志格式 -->
        <property name="PATTERN">%d{yyyy-MM-dd HH:mm:ss.SSS} |- %-5level [%20thread] %-40c{1.} [%4L] -| %msg%n</property>

        <Property name="LOG_DATE_FORMAT_PATTERN">yyyy-MM-dd HH:mm:ss.SSS</Property>
        <Property name="LOG_LEVEL_PATTERN">%-5level</Property>
        <Property name="PID">????</Property>
        <Property name="LOG_EXCEPTION_CONVERSION_WORD">%xwEx</Property>
        <!--原本行名输出%l  %-40.40c{1.}  %c{1.}(%F:%L)-->
        <Property name="CONSOLE_LOG_PATTERN">%clr{%d{${LOG_DATE_FORMAT_PATTERN}}}{faint}  %clr{${LOG_LEVEL_PATTERN}} %clr{${sys:PID}}{magenta} %clr{---}{faint} %clr{[%15.15thread]}{faint} %clr{%l}{cyan} %clr{:}{faint} %m%n${sys:LOG_EXCEPTION_CONVERSION_WORD}</Property>
        <Property name="FILE_LOG_PATTERN">%d{${LOG_DATE_FORMAT_PATTERN}} ${LOG_LEVEL_PATTERN} ${sys:PID} --- [%15.15thread] %l : %m%n${sys:LOG_EXCEPTION_CONVERSION_WORD}</Property>

    </properties>
    <!-- Appenders节点，常见的有三种子节点:Console、RollingFile、File.
        1、Console节点用来定义输出到控制台的Appender.
           name:指定Appender的名字.
           target:SYSTEM_OUT 或 SYSTEM_ERR,一般只设置默认:SYSTEM_OUT.
           PatternLayout:输出格式，不设置默认为:%m%n.
        2、File节点用来定义输出到指定位置的文件的Appender.
           name:指定Appender的名字.
           fileName:指定输出日志的目的文件带全路径的文件名.
           PatternLayout:输出格式，不设置默认为:%m%n.

        3、RollingFile节点用来定义超过指定大小自动删除旧的创建新的的Appender.
          name:指定Appender的名字.
          fileName:指定输出日志的目的文件带全路径的文件名.
          filePattern:指定新建日志文件的名称格式.
          PatternLayout:输出格式，不设置默认为:%m%n.
          Policies:指定滚动日志的策略，就是什么时候进行新建日志文件输出日志.
            TimeBasedTriggeringPolicy:Policies子节点，基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1 hour。modulate=true用来调整时间：比如现在是早上3am，interval是4，那么第一次滚动是在4am，接着是8am，12am...而不是7am.
            SizeBasedTriggeringPolicy:Policies子节点，基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小.
          DefaultRolloverStrategy:用来指定同一个文件夹下最多有几个日志文件时开始删除最旧的，创建新的(通过max属性)。
    -->
    <Appenders>
        <!--输出控制台的配置-->
        <Console name="Console" target="SYSTEM_OUT">
            <PatternLayout charset="UTF-8" pattern="${sys:CONSOLE_LOG_PATTERN}"/>
        </Console>

        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试用-->
        <!--<File name="File" fileName="output/logs/info.log" append="false">-->
            <!--<PatternLayout charset="UTF-8" pattern="${PATTERN}" />-->
        <!--</File>-->

        <!-- 文件会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingRandomAccessFile name="RollingFileInfo" immediateFlush="true"
                                 fileName="${LOG_HOME}/info.log"
                                 filePattern="${LOG_HOME}/$${date:yyyy-MM}/info-%d{yyyy-MM-dd HH}-%i.log.gz">
            <!-- ThresholdFilter中有level、onMatch、onMismatch三个键
                level定义了日志的级别.
                onMatch和onMismatch表示匹配与不匹配的情况.
                注意：onMatch指的是日志级别大于等于level时的操作，onMismatch表示日志级别小于level时的操作。
                     其对应的值有三种：ACCEPT（放行）、DENY（拒绝）、NEUTRAL（不做任何操作）

                例如设置日志级别为info，根据日志等级关系：off>fatal>error>warn>info>debug>trace>all，只需要设置大于等于warn的日志级别拒绝小于warn的日志级别放行，再加上，大于等于info的日志级别放行和小于info的日志级别拒绝，即可以得到只打印info的日志到相应的文件中。
             -->
            <Filters>
                <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
                <ThresholdFilter level="warn" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>

            <PatternLayout charset="UTF-8" pattern="${FILE_LOG_PATTERN}" />
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />
                <SizeBasedTriggeringPolicy size="1024 MB" />
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 -->
            <DefaultRolloverStrategy max="20" />
        </RollingRandomAccessFile>

        <RollingRandomAccessFile name="RollingFileWarn"
                                 fileName="${LOG_HOME}/warn.log"
                                 filePattern="${LOG_HOME}/$${date:yyyy-MM}/warn-%d{yyyy-MM-dd HH}-%i.log.gz">
            <Filters>
                <ThresholdFilter level="error" onMatch="DENY" onMismatch="NEUTRAL" />
                <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY" />
            </Filters>k
            <PatternLayout charset="UTF-8" pattern="${FILE_LOG_PATTERN}" />
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />
                <SizeBasedTriggeringPolicy size="10 MB" />
            </Policies>
            <DefaultRolloverStrategy max="20" />
        </RollingRandomAccessFile>

        <RollingRandomAccessFile name="RollingFileError"
                                 fileName="${LOG_HOME}/error.log"
                                 filePattern="${LOG_HOME}/$${date:yyyy-MM}/error-%d{yyyy-MM-dd HH}-%i.log.gz">
            <Filters>
                <ThresholdFilter level="fatal" onMatch="DENY" onMismatch="NEUTRAL" />
                <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY" />
            </Filters>k
            <PatternLayout charset="UTF-8" pattern="${FILE_LOG_PATTERN}" />
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />
                <SizeBasedTriggeringPolicy size="10 MB" />
            </Policies>
            <DefaultRolloverStrategy max="20" />
        </RollingRandomAccessFile>

        <RollingRandomAccessFile name="RollingFileFatal"
                                 fileName="${LOG_HOME}/fatal.log"
                                 filePattern="${LOG_HOME}/$${date:yyyy-MM}/fatal-%d{yyyy-MM-dd HH}-%i.log.gz">
            <Filters>
                <ThresholdFilter level="fatal" onMatch="ACCEPT" onMismatch="DENY" />
            </Filters>
            <PatternLayout charset="UTF-8" pattern="${FILE_LOG_PATTERN}" />
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />
                <SizeBasedTriggeringPolicy size="10 MB" />
            </Policies>
            <DefaultRolloverStrategy max="20" />
        </RollingRandomAccessFile>
    </Appenders>

    <!-- Loggers节点(只有定义了logger并引入的appender，appender才会生效)，常见的有两种:Root和Logger.
        1、Root节点用来指定项目的根日志，如果没有单独指定Logger，那么就会默认使用该Root日志输出
            level:日志输出级别，共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF.
            AppenderRef：Root的子节点，用来指定该日志输出到哪个Appender.
        2、Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。
            name:用来指定该Logger所适用的类或者类所在的包全路径,继承自Root节点.
            level:日志输出级别，共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF.
            additivity:"false"表示在该logger中输出的日志不会再延伸到父层logger；若为true，则会延伸到Root Logger，遵循Root Logger的配置也输出一次.
            AppenderRef：Logger的子节点，用来指定该日志输出到哪个Appender,如果没有指定，就会默认继承自Root.如果指定了，那么会在指定的这个Appender和Root的Appender中都会输出，此时我们可以设置Logger的additivity="false"只在自定义的Appender中进行输出。
     -->
    <Loggers>
        <!--<logger name="com.xxx.yyy.springbootguide.controller" level="info" additivity="true">-->
            <!--&lt;!&ndash; ref的值是对应使用的appenders的值 &ndash;&gt;-->
            <!--<appender-ref ref="FileInfo"/>-->
        <!--</logger>-->

        <Logger name="org.apache.catalina.startup.DigesterFactory" level="error"/>
        <Logger name="org.apache.catalina.util.LifecycleBase" level="error"/>
        <Logger name="org.apache.coyote.http11.Http11NioProtocol" level="warn"/>
        <logger name="org.apache.sshd.common.util.SecurityUtils" level="warn"/>
        <Logger name="org.apache.tomcat.util.net.NioSelectorPool" level="warn"/>
        <Logger name="org.eclipse.jetty.util.component.AbstractLifeCycle" level="error"/>
        <Logger name="org.hibernate.validator.internal.util.Version" level="warn"/>
        <logger name="org.springframework.boot.actuate.endpoint.jmx" level="warn"/>
        <Root level="info">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="RollingFileInfo"/>
            <AppenderRef ref="RollingFileWarn"/>
            <AppenderRef ref="RollingFileError"/>
            <AppenderRef ref="RollingFileFatal"/>
        </Root>
    </Loggers>
</Configuration>



