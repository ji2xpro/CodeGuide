# 默认的 8080 我们将它改成 9090
#server.port=8081

spring.application.name=SpringBootGuide

spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration

server.port=${port:9090}

# 未定义上下文路径之前 地址是 http://localhost:8080 定义了后 http://localhost:9090 你能在tomcat做的事情，配置文件都可以
spring.profiles.active=dev

my1.age=22
my1.name=battcn

########## 模板热部署 ##########
# 为了提高响应速度，默认情况下会缓存模板。如果是在开发中请将spring.thymeleaf.cache 属性设置成 false，那么在每次修改静态内容时按Command+Shift+F9（Fn+F9）即可重新加载了…
spring.thymeleaf.cache=false

########## 时间戳配置 ##########
#设置格式
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
#设置时区
spring.jackson.time-zone=GMT+8
#设置是否返回时间戳，如果为true返回时间戳，如果这三行同时存在，以第3行为准即返回时间戳
spring.jackson.serialization.write-dates-as-timestamps=false

#解决序列化报错，当定义的实体类未继承Serializable时存在报错
spring.jackson.serialization.FAIL_ON_EMPTY_BEANS=false

#参数意义：
#JsonInclude.Include.ALWAYS        默认，即使属性为null，仍然也会输出这个key
#JsonInclude.Include.NON_DEFAULT   属性为默认值不序列化
#JsonInclude.Include.NON_EMPTY     属性为 空（””） 或者为 NULL 都不序列化
#JsonInclude.Include.NON_NULL      属性为NULL  不序列化
spring.jackson.default-property-inclusion=ALWAYS

########## 数据库配置 ##########
#数据库配置
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.url=jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true&useSSL=false&serverTimezone=GMT%2B8
#spring.datasource.username=root
#spring.datasource.password=root123456


spring.datasource.druid.db1.name=Master 
spring.datasource.druid.db1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.druid.db1.url=jdbc:mysql://127.0.0.1:3306/Master?useUnicode=true&characterEncoding=utf-8&useSSL=false
spring.datasource.druid.db1.username=root
spring.datasource.druid.db1.password=root123456
##################    连接池配置    ################
#连接池建立时创建的初始化连接数
spring.datasource.druid.db1.initial-size=5
#连接池中最大的活跃连接数
spring.datasource.druid.db1.max-active=20
#连接池中最小的活跃连接数
spring.datasource.druid.db1.min-idle=5
# 配置获取连接等待超时的时间
spring.datasource.druid.db1.max-wait=60000
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.druid.db1.pool-prepared-statements=true
spring.datasource.druid.db1.max-pool-prepared-statement-per-connection-size=20
#spring.datasource.druid.max-open-prepared-statements= #和上面的等价
spring.datasource.druid.db1.validation-query=select 'x'
spring.datasource.druid.db1.validation-query-timeout=30000
#是否在获得连接后检测其可用性
spring.datasource.druid.db1.test-on-borrow=false
#是否在连接放回连接池后检测其可用性
spring.datasource.druid.db1.test-on-return=false
#是否在连接空闲一段时间后检测其可用性
spring.datasource.druid.db1.test-while-idle=true
spring.datasource.druid.db1.filters=stat,wall


spring.datasource.druid.db2.name=Slave
spring.datasource.druid.db2.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.druid.db2.url=jdbc:mysql://127.0.0.1:3306/Slave?useUnicode=true&characterEncoding=utf-8&useSSL=false
spring.datasource.druid.db2.username=root
spring.datasource.druid.db2.password=root123456
##################    连接池配置    ################
#连接池建立时创建的初始化连接数
spring.datasource.druid.db2.initial-size=5
#连接池中最大的活跃连接数
spring.datasource.druid.db2.max-active=20
#连接池中最小的活跃连接数
spring.datasource.druid.db2.min-idle=5
# 配置获取连接等待超时的时间
spring.datasource.druid.db2.max-wait=60000
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.druid.db2.pool-prepared-statements=true
spring.datasource.druid.db2.max-pool-prepared-statement-per-connection-size=20
#spring.datasource.druid.max-open-prepared-statements= #和上面的等价
spring.datasource.druid.db2.validation-query=select 'x'
spring.datasource.druid.db2.validation-query-timeout=30000
#是否在获得连接后检测其可用性
spring.datasource.druid.db2.test-on-borrow=false
#是否在连接放回连接池后检测其可用性
spring.datasource.druid.db2.test-on-return=false
#是否在连接空闲一段时间后检测其可用性
spring.datasource.druid.db2.test-while-idle=true
spring.datasource.druid.db2.filters=stat,wall

########### 连接池配置 ##########
## 连接池配置(通常来说，只需要修改initialSize、minIdle、maxActive
## 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false。removeabandoned不建议在生产环境中打开如果用SQL Server，建议追加配置)
##连接池建立时创建的初始化连接数
#spring.datasource.druid.initial-size=5
##连接池中最大的活跃连接数 maxIdle已经不再使用
#spring.datasource.druid.max-active=20
##连接池中最小的活跃连接数
#spring.datasource.druid.min-idle=5
##配置获取连接等待超时的时间，单位毫秒
#spring.datasource.druid.max-wait=60000
##是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭，mysql5.5+建议开启
#spring.datasource.druid.pool-prepared-statements=true
##指定每个连接上PSCache的大小，要启用PSCache，必须配置大于0，当值大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
#spring.datasource.druid.max-pool-prepared-statement-per-connection-size=20
##等价于上面的max-pool-prepared-statement-per-connection-size
#spring.datasource.druid.max-open-prepared-statements=20
##用来检测连接是否有效的sql 必须是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
##mysql中为 select 'x'
##oracle中为 select 1 from dual
#spring.datasource.druid.validation-query=select 'x'
#spring.datasource.druid.validation-query-timeout=30000
##申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
#spring.datasource.druid.test-on-borrow=false
##归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
#spring.datasource.druid.test-on-return=false
##申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。建议配置为true，不影响性能，并且保证安全性。
#spring.datasource.druid.test-while-idle=true
##既作为检测的间隔时间又作为testWhileIdel执行的依据
#spring.datasource.druid.time-between-eviction-runs-millis=60000
##配置一个连接在池中最小生存的时间，单位是毫秒
#spring.datasource.druid.min-evictable-idle-time-millis=30000
##spring.datasource.druid.max-evictable-idle-time-millis=
##配置扩展插件,配置多个英文逗号分隔
#spring.datasource.druid.filters=stat,wall,log4j2
##通过connectProperties属性来打开mergeSql功能；慢SQL记录
#spring.datasource.druid.connection-properties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
##合并多个DruidDataSource的监控数据
#spring.datasource.druid.use-global-data-source-stat=true
#spring.datasource.druid.async-init=true
#
## WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter
##是否启用StatFilter默认值true
#spring.datasource.druid.web-stat-filter.enabled= true
#spring.datasource.druid.web-stat-filter.url-pattern=/*
#spring.datasource.druid.web-stat-filter.exclusions=*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*
#spring.datasource.druid.web-stat-filter.session-stat-enable=false
#spring.datasource.druid.web-stat-filter.session-stat-max-count=1000
#spring.datasource.druid.web-stat-filter.principal-session-name=admin
#spring.datasource.druid.web-stat-filter.principal-cookie-name=admin
#spring.datasource.druid.web-stat-filter.profile-enable=true
#
## StatViewServlet配置，说明请参考Druid Wiki，配置_StatViewServlet配置
##展示Druid的统计信息,StatViewServlet的用途包括：1.提供监控信息展示的html页面2.提供监控信息的JSON API
##是否启用StatViewServlet默认值true
#spring.datasource.druid.stat-view-servlet.enabled= true
##根据配置中的url-pattern来访问内置监控页面，如果是上面的配置，内置监控页面的首页是/druid/index.html例如：
##http://110.76.43.235:9000/druid/index.html
##http://110.76.43.235:8080/mini-web/druid/index.html
#spring.datasource.druid.stat-view-servlet.url-pattern=/druid/*
##允许清空统计数据
#spring.datasource.druid.stat-view-servlet.reset-enable=true
##设置访问druid监控页的账号和密码,默认没有
##spring.datasource.druid.stat-view-servlet.login-username=admin
##spring.datasource.druid.stat-view-servlet.login-password=123456
##StatViewSerlvet展示出来的监控信息比较敏感，是系统运行的内部情况，如果你需要做访问控制，可以配置allow和deny这两个参数
##deny优先于allow，如果在deny列表中，就算在allow列表中，也会被拒绝。如果allow没有配置或者为空，则允许所有访问
##配置的格式
##<IP>
##或者<IP>/<SUB_NET_MASK_size>其中128.242.127.1/24
##24表示，前面24位是子网掩码，比对的时候，前面24位相同就匹配,不支持IPV6。
#spring.datasource.druid.stat-view-servlet.allow=
#spring.datasource.druid.stat-view-servlet.deny=128.242.127.1/24,128.242.128.1
#
## Spring监控配置，说明请参考Druid Github Wiki，配置_Druid和Spring关联监控配置
## Spring监控AOP切入点，如x.y.z.service.*,配置多个英文逗号分隔
#spring.datasource.druid.aop-patterns=com.xxx.yyy.springbootguide.service.*
#
#
## 配置StatFilter
#spring.datasource.druid.filter.stat.enabled=true
#spring.datasource.druid.filter.stat.db-type=mysql
#spring.datasource.druid.filter.stat.merge-sql=true
#spring.datasource.druid.filter.stat.log-slow-sql=true
#spring.datasource.druid.filter.stat.slow-sql-millis=1000
#
## 配置WallFilter
#spring.datasource.druid.filter.wall.enabled=true
#spring.datasource.druid.filter.wall.db-type=mysql
#spring.datasource.druid.filter.wall.config.alter-table-allow=false
#spring.datasource.druid.filter.wall.config.truncate-allow=false
#spring.datasource.druid.filter.wall.config.drop-table-allow=false
#
#spring.datasource.druid.filter.wall.config.none-base-statement-allow=false
#spring.datasource.druid.filter.wall.config.update-where-none-check=true
#spring.datasource.druid.filter.wall.config.select-into-outfile-allow=false
#spring.datasource.druid.filter.wall.config.metadata-allow=true
#spring.datasource.druid.filter.wall.log-violation=true
#spring.datasource.druid.filter.wall.throw-exception=true
#
#spring.datasource.druid.filter.log4j2.enabled=true
#spring.datasource.druid.filter.log4j2.connection-log-enabled=true
#spring.datasource.druid.filter.log4j2.connection-close-after-log-enabled=true
#spring.datasource.druid.filter.log4j2.connection-commit-after-log-enabled=true
#spring.datasource.druid.filter.log4j2.connection-connect-after-log-enabled=true
#spring.datasource.druid.filter.log4j2.connection-connect-before-log-enabled=true
#spring.datasource.druid.filter.log4j2.connection-log-error-enabled=true
#spring.datasource.druid.filter.log4j2.data-source-log-enabled=true
#spring.datasource.druid.filter.log4j2.result-set-log-enabled=true
#spring.datasource.druid.filter.log4j2.statement-log-enabled=true


# 如果想看到mybatis日志需要做如下配置
logging.level.com.xxx.yyy.springbootguide=DEBUG
logging.level.org.springfromework.web=info

########## Mybatis配置 ##########
# 配置mapper xml文件所在路径，这里是一个数组
mybatis.mapper-locations=classpath:mapper/*.xml
# 配置映射类所在包名
mybatis.type-aliases-package=com.xxx.yyy.springbootguide.model
# 驼峰命名规范，若设置此项配置，在XXmapper.xml中的resultMap的映射就可以省略掉了，如数据库字段是order_id，那么实体字段就要写成orderId
mybatis.configuration.map-underscore-to-camel-case=true

########## 通用Mapper ##########
# 主键自增回写方法，默认值MYSQL，详细说明请看文档
mapper.identity=MYSQL
mapper.mappers=tk.mybatis.mapper.common.BaseMapper
# 是否判断insert和update中字符串类型!=''
mapper.not-empty=true
# 枚举按简单类型处理，如果有枚举字段则需要加上该配置才会做映射
mapper.enum-as-simple-type=true
########## 分页插件 ##########
pagehelper.helper-dialect=mysql
pagehelper.params=count=countSql
# 分页合理化参数，默认值为false，直接根据参数进行查询。当该参数设置为true时，pageNum<=0时会查询第一页，pageNum>pages（超过总数时），会查询最后一页。
pagehelper.reasonable=false
# 支持通过Mapper接口参数来传递分页参数，默认值false，分页插件会从查询方法的参数值中，自动根据上面params配置的字段中取值，查找到合适的值时就会自动分页。
pagehelper.support-methods-arguments=true


########## redis ##########
# redis的ip地址
spring.redis.host=127.0.0.1
# 端口号
spring.redis.port=6379
# 如果有密码时
spring.redis.password=
# redis连接超时时间（毫秒），默认是2000ms
spring.redis.timeout=10000ms
# redis默认情况下有16个分片，这里配置具体使用的分片，默认是0
spring.redis.database=0
# 连接池最大连接数（使用负值表示没有限制） 默认是8
spring.redis.lettuce.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制），默认是-1
spring.redis.lettuce.pool.max-wait=-1ms
# 连接池中的最大空闲连接，默认是8
spring.redis.lettuce.pool.max-idle=8
# 连接池中的最小空闲连接，默认是0
spring.redis.lettuce.pool.min-idle=0


# 一般来说是不用配置的，Spring Cache会根据依赖的包自行装配JCache -> EhCache -> Redis -> Guava，但先后顺序会对Redis使用有影响
spring.cache.type=redis

# 扫描的包路径,默认扫描所有
spring.swagger.base-package=com.xxx.yyy.springbootguide
# 默认为 true
spring.swagger.enabled=true


########## rabbitmq ##########
spring.rabbitmq.host=127.0.0.1
spring.rabbitmq.port=5672
spring.rabbitmq.username=admin
spring.rabbitmq.password=admin
spring.rabbitmq.virtual-host=/
# 手动ACK 不开启自动ACK模式,目的是防止报错后未正确处理消息丢失 默认 为 none
spring.rabbitmq.listener.simple.acknowledge-mode=manual
## 指定并发消费者的最小值
#spring.rabbitmq.listener.simple.concurrency=10
## 指定并发消费者的最大值
#spring.rabbitmq.listener.simple.max-concurrency=20
## 每个消费者每次监听时可拉取处理的消息数量
#spring.rabbitmq.listener.simple.prefetch=5

# 让404抛出异常
spring.mvc.throw-exception-if-no-handler-found=true
spring.resources.add-mappings=false


#spring.output.ansi.enabled=always

#logging.config=classpath:log4j2.xml

#logging.file.path=output/logs/
#logging.file.name=log.log

#logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss:SSS} [%thread] %-5level %logger : %msg%n
#logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss:SSS} [%thread] %-5level %logger : %msg%n